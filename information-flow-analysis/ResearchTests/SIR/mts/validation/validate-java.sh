#!/bin/bash
#
# Validation script used to ensure semantic equivalence of the scripts
# produced by the new MakeTestScript program and the old C implementation
# of mts. Depends on the mts/javamts wrapper scripts.
#
# Set the conditional compilation variables in the script generators
# as follows:
#
# EXACT_COMPATIBILITY = true;
# EXACT_COMPATIBILITY_C = false;
# EXACT_COMPATIBILITY_JAVA = true;
#
# This script will then demonstrate that the new MakeTestScript program
# generates scripts that are lexically identical to those generated by
# the old javamts program (excepting whitespace variations). A trivial
# inspection of the changes effected by the above conditional compilation
# flags then proves semantic equivalence.
#
# Alex Kinneer
# University of Nebraska - Lincoln
# February 14, 2006

OLD_MTS_CSH='/net/frost/export/u3/galileo/aristotle/v3.5.6/bin/sunos5/javamts'
OLD_MTS_BSH='/net/frost/export/u3/galileo/aristotle/v3.5.6/bin/sunos5/javamts-bsh'
NEW_MTS='/net/frost/export/u3/galileo/alex/mts/javamts'
SUBJECT_DIR='/net/frost/export/u3/galileo/subjects/internal/java'
REPORT_FILE=`pwd`/java-mts-validate-report.txt

cd ${SUBJECT_DIR}

for SBJ_NAME in *; do
  echo "Checking ${SBJ_NAME}..."

  cd ${SBJ_NAME}/testplans.alt
  
  for UNIV in `find . -name "*universe*"`; do
    for TYPE in R D d T; do
      OLD_SCRIPT="${SBJ_NAME}_${TYPE}.old.csh"
      NEW_SCRIPT="${SBJ_NAME}_${TYPE}.new.csh"
      
      if [ "${TYPE}" = "D" ] || [ "${TYPE}" = "d" ]; then
        CMP_DIR="../outputs.alt/"
      else
        CMP_DIR="NULL"
      fi
      
      if [ "${TYPE}" = "T" ]; then
        TRACE_NAME="instout"
        INST_TYPE="-BEXC"
      else
        TRACE_NAME="NULL"
        INST_TYPE="NULL"
      fi
      
      echo ${UNIV}
      
      ${OLD_MTS_CSH} ".." ${SBJ_NAME} ${UNIV} ${TYPE} ${OLD_SCRIPT} ${TRACE_NAME} ${CMP_DIR} ${INST_TYPE} "java"
      ${NEW_MTS} ".." ${SBJ_NAME} ${UNIV} ${TYPE} ${NEW_SCRIPT} ${TRACE_NAME} ${CMP_DIR} ${INST_TYPE} "java"
      diff -b ${OLD_SCRIPT} ${NEW_SCRIPT} > /dev/null
      if [ $? -ne 0 ]; then
        rm ${OLD_SCRIPT}
        rm ${NEW_SCRIPT}
        
        ${OLD_MTS_BSH} ".." ${SBJ_NAME} ${UNIV} ${TYPE} ${OLD_SCRIPT} ${TRACE_NAME} ${CMP_DIR} ${INST_TYPE} "java"
        ${NEW_MTS} ".." ${SBJ_NAME} ${UNIV} ${TYPE} ${NEW_SCRIPT} ${TRACE_NAME} ${CMP_DIR} ${INST_TYPE} "java" "bsh"
        diff -b ${OLD_SCRIPT} ${NEW_SCRIPT} > /dev/null
        
        if [ $? -ne 0 ]; then
          echo '[FAIL] '"${SBJ_NAME} : Type ${TYPE} : ${UNIV}" >> ${REPORT_FILE}
          exit
        else
          echo '[PASS] '"(bsh) ${SBJ_NAME} : Type ${TYPE} : ${UNIV}" >> ${REPORT_FILE}
        fi
      else
        echo '[PASS] '"(csh) ${SBJ_NAME} : Type ${TYPE} : ${UNIV}" >> ${REPORT_FILE}
      fi
      
      rm ${OLD_SCRIPT}
      rm ${NEW_SCRIPT}
    done
  done
      
  cd ${SUBJECT_DIR}
done
